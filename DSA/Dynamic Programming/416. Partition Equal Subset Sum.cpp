#include <iostream>
#include <algorithm>
#include <numeric>
#include <vector>

using namespace std;

const int LIM_SUM = 200*100 + 1;
std::vector<vector<int8_t>> dp(201, vector<int8_t>(LIM_SUM, -1));

bool general(std::vector<int> &nums, int sum, int pos = 0, int currSum = 0) {
    if (2*currSum == sum) return true;
    else if (pos == nums.size() || 2*currSum > sum) return false;
    if (dp[pos][sum] != -1) return dp[pos][sum];
    return dp[pos][sum] = general(nums, sum, pos + 1, currSum + nums[pos]) |
        general(nums, sum, pos + 1, currSum);
}

bool canPartition(vector<int>& nums) {
    int sum = accumulate(nums.begin(), nums.end(), 0);
    if (sum & 1) return false;
    return general(nums, sum); 
}
    
int main() {
    // {}
    // std::vector<int> nums = {};
    vector<int> nums = {1,5,11,5};  
    std::cout << canPartition(nums) << " ";
    // int8_t t[10][20] = {[0 ... 9] = {[0 ... 19] = -1}};
    // int8_t t[201][10001] = {[0 ... 200] = {[0 ... 10000] = -1}};
    // for (int i = 0; i < 10; i++) {
    //     for (int j = 0; j < 20; j++)
    //         std::cout << t[i][j] << " ";
    //     std::cout << "\n";
    // }
}